source $HOME/.vim/vimrc.base

"""""""""""""""""""""""""""""Plug settings""""""""""""""""""""""""""
call plug#begin('~/.vim/Plug/')
source $HOME/.vim/plugin.base
Plug 'preservim/tagbar'
Plug 'honza/vim-snippets'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
call plug#end()
""""""""""""""""""""""""""""""""" Plug END""""""""""""""""""""""""""

nmap <leader>tg :TagbarToggle<CR>

" >>>>>>>>>>>>>>>>>>>       coc        >>>>>>>>>>>>>>>>>>>>>>>>>
" ==                  config coc start                        ==
" ==                                                          ==
nmap <leader>rn <Plug>(coc-rename)
nmap <leader>ca  <Plug>(coc-codeaction)
nmap <leader>qf  <Plug>(coc-fix-current)
xmap <leader>fm  <Plug>(coc-format-selected)

" see coc.nvim/plugin/coco.vim for more mapping details
nmap <leader>gd :<C-u>call CocActionAsync('jumpDeclaration')<CR>
nmap <leader>gi :<C-u>call CocActionAsync("jumpDefinition")<CR>
nmap <leader>gr :<C-u>call CocActionAsync('jumpReferences')<CR>

"list diagnostic
nmap <leader>ld :CocDiagnostics<CR>

let g:coc_snippet_next = '<c-j>'
let g:coc_snippet_prev = '<c-k>'

inoremap <silent><expr> <cr>
      \ pumvisible() ? coc#_select_confirm() :
      \ "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" : coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

autocmd CursorHold * silent call CocActionAsync('highlight')
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

function! StatusDiagnostic() abort
  let info = get(b:, 'coc_diagnostic_info', {})
  if empty(info) | return '' | endif
  let msgs = []
  if get(info, 'error', 0)
    call add(msgs, 'E' . info['error'])
  endif
  if get(info, 'warning', 0)
    call add(msgs, 'W' . info['warning'])
  endif
  return join(msgs, ' '). ' ' . get(g:, 'coc_status', '')
endfunction

"set statusline^=%{coc#status()}
set statusline^=%{StatusDiagnostic()}

" ==                                                          ==
" ==                  config coc end                          ==
" >>>>>>>>>>>>>>>>>>>       coc        >>>>>>>>>>>>>>>>>>>>>>>>>

