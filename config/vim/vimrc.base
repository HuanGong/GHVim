" <<<<<<<<<<<<<<<<<<<<< base <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
set hidden
set hlsearch
set showmatch
set incsearch
set ignorecase

set nobackup
set noswapfile
set nowritebackup
set nocompatible

set cmdheight=2
set shortmess+=c
set updatetime=300
set scrolloff=3                   " 光标移动到buffer的顶部和底部时保持3行距离
set laststatus=2                  " 启动显示状态行(1),总是显示状态行(2)
set signcolumn=no                 " no diagnostic

set encoding=utf-8
set fileformat=unix
set termencoding=utf-8

" indent default setting
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2

set foldenable                " 开始折叠
set foldmethod=syntax         " 设置语法折叠
set foldlevelstart=99         " 打开文件是默认不折叠代码


nnoremap ;  :
let mapleader=','
colorscheme molokai

syntax on
filetype on
syntax enable
filetype plugin indent on

" base key mapping
nnoremap ;  :
nnoremap <leader>w  <c-w>
nnoremap <leader>ch :A<CR>
nnoremap <leader>tf @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>

inoremap <C-e> <C-o>$
inoremap <C-a> <C-o>0
inoremap <expr> <C-j> pumvisible() ? "\<C-n>" : "\<C-j>"
inoremap <expr> <C-k> pumvisible() ? "\<C-p>" : "\<C-k>"
" <<<<<<<<<<<<<<<<<<<<< base end <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


"""""""""""""""""""""""""""""Plug settings""""""""""""""""""""""""""
call plug#begin('~/.vim/Plug/')
source $HOME/.vim/plugin.base
call plug#end()
""""""""""""""""""""""""""""""""" Plug END""""""""""""""""""""""""""

let g:cpp_member_highlight = 1
let g:cpp_simple_highlight = 1
let g:cpp_attributes_highlight = 1
let g:cpp_class_scope_highlight = 1
"let g:cpp_no_function_highlight = 1


" >>>>>>>>>>>>>>>>>>>>>>> config nerdtree >>>>>>>>>>>>>>>>>>
let g:NERDTreeWinSize=32
let g:NERDTreeQuitOnOpen = 0
let g:NERDTreeDirArrows = 1
let g:NERDTreeGlyphReadOnly = "RO"
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
let NERDTreeIgnore=['\.pyc','\~$','\.swp', '\.o']

noremap <leader>ts  :NERDTreeToggle<CR>

autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" <<<<<<<<<<<<<<<<<<<<<<< config nerdtree >>>>>>>>>>>>>>>>>>>

" >>>>>>>>>>>>>>>>>>>>>>>> async run >>>>>>>>>>>>>>>>>>>>>>>>
autocmd User AsyncRunStart call asyncrun#quickfix_toggle(8, 1)
" <<<<<<<<<<<<<<<<<<<<<<<< async run end <<<<<<<<<<<<<<<<<<<<

" >>>>>>>>>>>>>>>>>>> config leaderF >>>>>>>>>>>>>>>>>>>>>>>>>

" don't show the help in normal mode
let g:Lf_HideHelp = 1
let g:Lf_WildIgnore = {
      \ 'dir': ['.svn','.git','.hg', '*build*', '.clangd', '.vscode', '*blade*'],
      \ 'file': ['*.sw?','~$*','*.bak','*.exe','*.o','*.so','*.py[co]']
      \}

"<leader>b <leader>f default bind to search files/buffers
noremap <leader>gm :<C-U><C-R>=printf("Leaderf mru %s", "")<CR><CR>
noremap <leader>gl :<C-U><C-R>=printf("Leaderf line %s", "")<CR><CR>

if executable("rg")
  noremap <leader>tq :<C-U>Leaderf! rg --recall<CR>
  noremap <leader>fc :<C-U><C-R>=printf("Leaderf! rg -e %s ", expand("<cword>"))<CR>
  noremap <leader>fb :<C-U><C-R>=printf("Leaderf! rg -F --current-buffer -e %s ", expand("<cword>"))<CR>
	xnoremap <leader>fv :<C-U><C-R>=printf("Leaderf! rg -F -e %s ", leaderf#Rg#visual())<CR>
else
  set wildchar=<Tab> wildmenu wildmode=full
  nnoremap <leader>tq :call asyncrun#quickfix_toggle(8)<cr>
  nnoremap <leader>fc :AsyncRun grep -rwn <cword> .<cr>
  nnoremap <leader>fd :AsyncRun grep -rwn <cword> .
endif
" <<<<<<<<<<<<<<<<<<<<< end leaderF <<<<<<<<<<<<<<<<<<<<<<<<<<

" >>>>>>>>>>>>>>>>>>>>> highlight empty >>>>>>>>>>>>>>>>
highlight WhitespaceEOL ctermbg=red guibg=red
match WhitespaceEOL /\s\+$/

function RemoveTrailingSpace()
  if &ft != "diff"
    let b:curcol = col(".")
    let b:curline = line(".")
    silent! %s/\s\+$//
    call cursor(b:curline, b:curcol)
  endif
endfunction
autocmd BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif
" >>>>>>>>>>>>>>>>>>>>> highlight end>>>>>>>>>>>>>>>>

au BufNewFile,BufRead python
    \ set tabstop=4 |
    \ set expandtab |
    \ set autoindent |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set softtabstop=4

" c++0x lambda expr indent
au Filetype cpp,c,objc
    \ setlocal cindent |
    \ setlocal cinoptions=l1 |
    \ setlocal cinoptions+=:0 |
    \ setlocal cino=l1,j1,(0,ws,Ws |
    \ setlocal expandtab tabstop=2 shiftwidth=2

