if has('nvim') " use deoplete
  let &packpath=&runtimepath
  set runtimepath^=~/.vim runtimepath+=~/.vim/after
endif

set magic                         " 设置 regulation express
set showmatch
set autoindent                    "自动对齐
set matchtime=2
set nowrap
set incsearch
set noswapfile
set ignorecase

set encoding=utf-8
set termencoding=utf-8

" indent default setting
set tabstop=2
set expandtab
set smartindent                   "智能对齐
set shiftwidth=2
set softtabstop=2

set scrolloff=3                   " 光标移动到buffer的顶部和底部时保持3行距离
set laststatus=2                  " 启动显示状态行(1),总是显示状态行(2)
set history=1000                  " 历史记录数量
set selection=inclusive           "
set backspace=indent,eol,start

syntax on
filetype on
syntax enable
filetype plugin indent on

set pumheight=20
set completeopt=menu,menuone

set foldenable                " 开始折叠
set foldmethod=syntax         " 设置语法折叠
set foldlevelstart=99         " 打开文件是默认不折叠代码

let mapleader=','
colorscheme molokai

"""""""""""""""""""""""""""""Plug settings""""""""""""""""""""""""""
call plug#begin('~/.vim/Plug/')

Plug 'Yggdroot/LeaderF'
Plug 'majutsushi/tagbar'
Plug 'ap/vim-buftabline'
Plug 'scrooloose/nerdtree'
"Plug 'davidhalter/jedi-vim'
"Plug 'Valloric/YouCompleteMe'

"Plug 'prabirshrestha/async.vim'
"Plug 'prabirshrestha/vim-lsp'
"Plug 'prabirshrestha/asyncomplete.vim'
"Plug 'prabirshrestha/asyncomplete-lsp.vim'
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'maralla/completor.vim'
endif

Plug 'scrooloose/nerdcommenter'
Plug 'skywind3000/asyncrun.vim'
Plug 'easymotion/vim-easymotion'
Plug 'hynek/vim-python-pep8-indent'
Plug 'octol/vim-cpp-enhanced-highlight'

call plug#end()
""""""""""""""""""""""""""""""""" Plug END""""""""""""""""""""""""""

let g:cpp_class_scope_highlight = 1

" >>>>>>>>>>>>>>>>>>>>>>> config nerdtree >>>>>>>>>>>>>>>>>>>>>>>>>>>>>
let g:NERDTreeDirArrows = 1
let g:NERDTreeNodeDelimiter=''
let g:NERDTreeGlyphReadOnly = "RO"
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
let NERDTreeIgnore=['\.pyc','\~$','\.swp','\.o']

autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") && v:this_session == "" | NERDTree | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

noremap <leader>ts  :NERDTreeToggle<CR>
" <<<<<<<<<<<<<<<<<<<<<<< config nerdtree >>>>>>>>>>>>>>>>>>>>>>>>>>>>>


" >>>>>>>>>>>>>>>>>>>>> config for LanguageClient + completor >>>>>>>
set runtimepath+=~/.vim-plugins/LanguageClient-neovim
let g:LanguageClient_serverCommands = {
      \ 'cpp': ['clangd', '-background-index', '-clang-tidy'],
      \}
let g:LanguageClient_selectionUI = 'quickfix'

command! LCMenu call LanguageClient_contextMenu()
command! LCHover call LanguageClient#textDocument_hover()
command! LCRename call LanguageClient#textDocument_rename()
command! LCFormat call LanguageClient#textDocument_formatting()
command! LCFormatSelection call LanguageClient#textDocument_rangeFormatting()

autocmd FileType python,cpp,d setlocal omnifunc=LanguageClient#complete
" let g:LanguageClient_diagnosticsEnable = 1 " シンタックスチェック
" let g:LanguageClient_loggingFile = expand($VIM.'/_lsplog')
" let g:LanguageClient_serverStderr = expand($VIM.'/_lsperr')
function EnableLSPShortcuts()
  nnoremap <leader>rn :call LanguageClient#textDocument_rename()<CR>
  nnoremap <leader>gd :call LanguageClient#textDocument_definition()<CR>
  nnoremap <leader>gr :call LanguageClient#textDocument_references()<CR>

  nnoremap <leader>la :call LanguageClient_workspace_applyEdit()<CR>
  nnoremap <leader>lc :call LanguageClient#textDocument_completion()<CR>
  nnoremap <leader>ld :call LanguageClient#textDocument_typeDefinition()<CR>
  nnoremap <leader>ls :call LanguageClient_textDocument_documentSymbol()<CR>
endfunction()
augroup LSP
  autocmd!
  autocmd FileType cpp,c call EnableLSPShortcuts()
augroup END
"<<<<<<<<<<<<<<<<<<<< end config LanguageClient + completor <<<<<<<<<<


">>>>>>>>>>>>>>>>>>> start completor config completor 和 deoplete二选一
inoremap <c-c> <ESC>
inoremap <expr> <CR> (pumvisible() ? "\<c-y>\<cr>" : "\<CR>")
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

if has('nvim') " use deoplete
  let g:deoplete#enable_at_startup = 1
else
  let g:completor_min_chars = 3
  let g:completor_auto_trigger = 1
  let g:completor_completion_delay = 100
  " let g:completor_refresh_always = 0 "avoid flickering
  " let g:completor_fuzzy_match = 0
  let g:completor_disable_necosyntax = ['vim','python','cpp','c']
  let g:completor_complete_options = 'menuone,noselect,preview'
  let g:completor_cpp_omni_trigger = '\w+(\.|->|::)\w*$|\w{3,}$'
  let g:completor_python_omni_trigger = '\A\w*$|[^. \t]\.\w*$'
endif
" <<<<<<<<<<<<<<<<<< end completor config <<<<<<<<<<<<<<<<<<<<<

autocmd User AsyncRunStart call asyncrun#quickfix_toggle(8, 1)

nnoremap ;  :
noremap <leader>w <c-w>
nnoremap <leader>ch :A<CR>
noremap <Leader>tt  :TagbarToggle<CR>
nnoremap <leader>tq :call asyncrun#quickfix_toggle(8)<cr>
nnoremap <leader>tf @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>

" go matche symbol; move start; move end
nnoremap <leader>gm %
nnoremap <leader>me $
nnoremap <leader>ms 0

set wildchar=<Tab> wildmenu wildmode=full
nnoremap <leader>gt :buffers<CR>:buffer<Space>
nnoremap <leader>fc :AsyncRun grep -rwn <cword> .<cr>
nnoremap <leader>fd :AsyncRun grep -rwn <cword> .

highlight WhitespaceEOL ctermbg=red guibg=red
match WhitespaceEOL /\s\+$/

function RemoveTrailingSpace()
  if &ft != "diff"
    let b:curcol = col(".")
    let b:curline = line(".")
    silent! %s/\s\+$//
    call cursor(b:curline, b:curcol)
  endif
endfunction

autocmd BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

au BufNewFile,BufRead python
    \ set tabstop=4 |
    \ set expandtab |
    \ set autoindent |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set softtabstop=4 |
    \ set fileformat=unix

" c++0x lambda expr indent
au Filetype cpp,c,objc
    \ setlocal cindent |
    \ setlocal cinoptions=l1 |
    \ setlocal cinoptions+=:0 |
    \ setlocal cino=l1,j1,(0,ws,Ws |
    \ setlocal expandtab tabstop=2 shiftwidth=2
